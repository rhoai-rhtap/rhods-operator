name: Bundle Sync CI

on:
  push:
    branches:
      - 'rhoai-*'  # Trigger the workflow on pushes to any rhoai-* branch
    paths:
      - 'bundle/**'  # Trigger the workflow for changes to any file in the bundle directory
      - 'Dockerfiles/bundle.Dockerfile'  # Trigger the workflow for changes to the Dockerfile

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source repo
        uses: actions/checkout@v3
        with:
          repository: rhoai-rhtap/rhods-operator.git
          path: source_repo
          ref: ${{ github.ref_name }}  # Use the same branch name as in the event

      - name: Checkout target repo
        uses: actions/checkout@v3
        with:
          repository: rhoai-rhtap/RHOAI-Build-Config.git
          path: target_repo
          ref: ${{ github.ref_name }}  # Use the same branch name as in the event

      - name: Remove unnecessary fields from CSV
        run: |
          sed -i '/olm.skipRange/d' source_repo/bundle/manifests/*.clusterserviceversion.yaml
          sed -i '/replaces/d' source_repo/bundle/manifests/*.clusterserviceversion.yaml

      - name: Remove channels and defaultChannel from annotations.yaml
        run: |
          # Remove the entire line containing "operators.operatorframework.io.bundle.channels.v1"
          sed -i '/operators.operatorframework.io.bundle.channels.v1:/d' source_repo/bundle/metadata/annotations.yaml
    
          # Remove the entire line containing "operators.operatorframework.io.bundle.channel.default.v1"
          sed -i '/operators.operatorframework.io.bundle.channel.default.v1:/d' source_repo/bundle/metadata/annotations.yaml

      - name: Retain current image digests in the RBC repo
        run: |
          # Backup current image digests
          cp target_repo/bundle/manifests/*.clusterserviceversion.yaml /tmp/rbc_csv.yaml
          # Replace image digests in the source CSV with the ones from the target repo
          for image in $(grep -oP 'image:\s*\K\S+' /tmp/rbc_csv.yaml); do
            sed -i "s|image: .*|image: $image|g" source_repo/bundle/manifests/*.clusterserviceversion.yaml
          done

      - name: Sync RELATED_IMAGE values
        run: |
          # Sync RELATED_IMAGE values from source CSV to target CSV
          for related_image in $(grep -oP 'RELATED_IMAGE_\w+:\s*\K\S+' source_repo/bundle/manifests/*.clusterserviceversion.yaml); do
            key=$(echo $related_image | cut -d= -f1)
            value=$(echo $related_image | cut -d= -f2)
            sed -i "s|$key=.*|$key=$value|g" target_repo/bundle/manifests/*.clusterserviceversion.yaml
          done

      - name: Compare and Sync Changes
        run: |
          # Function to compare and sync files
          sync_files() {
            local source_dir=$1
            local target_dir=$2
            for file in $(find $source_dir -type f); do
              relative_path=$(realpath --relative-to="$source_dir" "$file")
              target_file="$target_dir/$relative_path"
              if [ -f "$target_file" ]; then
                if ! diff -q "$file" "$target_file" > /dev/null 2>&1; then
                  echo "Updating $target_file"
                  cp "$file" "$target_file"
                else
                  echo "No changes in $target_file"
                fi
              else
                echo "New file detected, copying $file to target repo"
                mkdir -p "$(dirname "$target_file")"
                cp "$file" "$target_file"
              fi
            done
          }
          # Sync files from source_repo/bundle to target_repo/bundle
          sync_files "source_repo/bundle" "target_repo/bundle"
          
          # Sync Dockerfile
          if ! diff -q source_repo/Dockerfiles/bundle.Dockerfile target_repo/bundle/Dockerfile > /dev/null 2>&1; then
            echo "Updating Dockerfile"
            cp source_repo/Dockerfiles/bundle.Dockerfile target_repo/bundle/Dockerfile
          else
            echo "No changes in Dockerfile"
          fi
      - name: Generate github-app token
        id: app-token
        uses: getsentry/action-github-app-token@v2
        with:
          app_id: ${{ secrets.RHOAI_DEVOPS_APP_ID }}
          private_key: ${{ secrets.RHOAI_DEVOPS_APP_PRIVATE_KEY }}
      - name: Commit and push the changes to release branch
        uses: actions-js/push@master
        with:
          github_token: ${{ steps.app-token.outputs.token }}
          branch: ${{ github.ref_name }}
          message: "Sync changes from source repo"
          repository: rhoai-rhtap/RHOAI-Build-Config
          directory: target_repo
          author_name: Openshift-AI DevOps
          author_email: openshift-ai-devops@redhat.com
#      - name: Commit and Push Changes to Target Repo
#        run: |
#          cd target_repo
#          git config user.name "GitHub Actions"
#          git config user.email "actions@github.com"
#          git add .
#          git commit -m "Sync changes from source repo" || echo "No changes to commit"
#          git push origin ${{ github.ref_name }}  # Push to the same branch in the target repo
