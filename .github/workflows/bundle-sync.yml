name: Bundle Sync CI

on:
  workflow_dispatch:

  push:
    branches:
      - 'rhoai-*'  # Trigger the workflow on pushes to any rhoai-* branch
    paths:
      - 'bundle/**'  # Trigger the workflow for changes to any file in the bundle directory
      - 'Dockerfiles/bundle.Dockerfile'  # Trigger the workflow for changes to the Dockerfile

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Generate github-app token
        id: app-token
        uses: getsentry/action-github-app-token@v2
        with:
          app_id: ${{ secrets.RHOAI_DEVOPS_APP_ID }}
          private_key: ${{ secrets.RHOAI_DEVOPS_APP_PRIVATE_KEY }}
      - name: Checkout source repo
        uses: actions/checkout@v3
        with:
          repository: rhoai-rhtap/rhods-operator
          path: source_repo
          ref: ${{ github.ref_name }}  # Use the same branch name as in the event
          token: ${{ steps.app-token.outputs.token }}

      - name: Checkout target repo
        uses: actions/checkout@v3
        with:
          repository: rhoai-rhtap/RHOAI-Build-Config
          path: target_repo
          ref: ${{ github.ref_name }}  # Use the same branch name as in the event
          token: ${{ steps.app-token.outputs.token }}
          
      - name: Install rsync and yq
        run: |
          sudo apt-get update
          sudo apt-get install -y rsync
          # Install yq
          VERSION=v4.34.2  # Specify the version of yq to install
          sudo wget https://github.com/mikefarah/yq/releases/download/${VERSION}/yq_linux_amd64 -O /usr/bin/yq
          # Set permissions for yq
          sudo chmod +x /usr/bin/yq 

      - name: Remove unnecessary fields from CSV
        run: |
          yq eval 'del(.spec.skipRange)' -i source_repo/bundle/manifests/*.clusterserviceversion.yaml
          yq eval 'del(.spec.replaces)' -i source_repo/bundle/manifests/*.clusterserviceversion.yaml

      - name: Remove channels and defaultChannel from annotations.yaml
        run: |
          yq eval 'del(.annotations."operators.operatorframework.io.bundle.channels.v1")' -i source_repo/bundle/metadata/annotations.yaml
          yq eval 'del(.annotations."operators.operatorframework.io.bundle.channel.default.v1")' -i source_repo/bundle/metadata/annotations.yaml

      - name: Remove labels from Dockerfile
        run: |
          sed -i '/LABEL operators.operatorframework.io.bundle.channels.v1=/d' source_repo/Dockerfiles/bundle.Dockerfile
          sed -i '/LABEL operators.operatorframework.io.bundle.channel.default.v1=/d' source_repo/Dockerfiles/bundle.Dockerfile

      - name: Backup RELATED_IMAGE fields and relatedImages section
        run: |
          # Backup RELATED_IMAGE fields
          grep '^RELATED_IMAGE_' target_repo/bundle/manifests/*.clusterserviceversion.yaml > /tmp/backup_related_image.txt || true
          
          # Backup relatedImages section
          sed -n '/relatedImages:/,/]/p' target_repo/bundle/manifests/*.clusterserviceversion.yaml > /tmp/backup_relatedImages.txt || true
          
      - name: Retain current image digests in the RBC repo
        run: |
          # Backup current image digests
          cp target_repo/bundle/manifests/*.clusterserviceversion.yaml /tmp/rbc_csv.yaml
          
          # Replace image digests in the source CSV with the ones from the target repo
          for image in $(grep -oP 'image:\s*\K\S+' /tmp/rbc_csv.yaml); do
            sed -i "s|image: .*|image: $image|g" source_repo/bundle/manifests/*.clusterserviceversion.yaml
          done
          
      - name: Sync RELATED_IMAGE values (excluding annotations)
        run: |
          # Extract RELATED_IMAGE_* values from the target CSV
          while IFS= read -r related_image; do
            value=$(grep "$related_image:" /tmp/backup_related_image.txt | cut -d: -f2- | xargs) # Trim leading spaces from the value
            yq eval -i ".metadata.annotations[\"$related_image\"] = \"$value\"" source_repo/bundle/manifests/*.clusterserviceversion.yaml
          done < /tmp/backup_related_image.txt
          
      - name: Sync Files Using rsync
        run: |
          # Sync bundle directory from source to target using rsync
          rsync -av --progress source_repo/bundle/ target_repo/bundle/
          # Sync Dockerfile
          rsync -av --progress source_repo/Dockerfiles/bundle.Dockerfile target_repo/bundle/Dockerfile
          
      - name: Restore RELATED_IMAGE fields and relatedImages section
        run: |
          # Restore the RELATED_IMAGE fields
          while IFS= read -r line; do
            key=$(echo "$line" | cut -d: -f1)
            value=$(echo "$line" | cut -d: -f2- | xargs) # Trim leading spaces from the value
            
            # Use yq to only set the RELATED_IMAGE field if it does not already exist
            if ! yq eval "has(.spec.containers[].env[] | select(.name == \"$key\"))" target_repo/bundle/manifests/*.clusterserviceversion.yaml; then
              yq eval -i ".spec.containers[].env += [{name: \"$key\", value: \"$value\"}]" target_repo/bundle/manifests/*.clusterserviceversion.yaml
            fi
            
          done < /tmp/backup_related_image.txt
          # Restore the relatedImages section if it exists
          if [[ -s /tmp/backup_relatedImages.txt ]]; then
            # Use yq to ensure the relatedImages section is present and append the data
            yq eval -i '.spec.relatedImages = load("/tmp/backup_relatedImages.txt")' target_repo/bundle/manifests/*.clusterserviceversion.yaml
          fi
          
      - name: Debug Target YAML File
        run: |
          echo "Target CSV after restoration:"
          cat target_repo/bundle/manifests/*.clusterserviceversion.yaml

      # Sync Dockerfile
      - name: Sync Dockerfile
        run: |
          if ! diff -q source_repo/Dockerfiles/bundle.Dockerfile target_repo/bundle/Dockerfile > /dev/null 2>&1; then
            echo "Updating Dockerfile"
            cp source_repo/Dockerfiles/bundle.Dockerfile target_repo/bundle/Dockerfile
          else
            echo "No changes in Dockerfile"
          fi

#      - name: Commit and push the changes to release branch
#        uses: actions-js/push@master
#        with:
#          github_token: ${{ steps.app-token.outputs.token }}
#          branch: ${{ github.ref_name }}
#          message: "Sync changes from source repo"
#          repository: rhoai-rhtap/RHOAI-Build-Config
#          directory: target_repo
#          author_name: Openshift-AI DevOps
#          author_email: openshift-ai-devops@redhat.com

#      - name: Commit and Push Changes to Target Repo
#        run: |
#          cd target_repo
#          git config user.name "GitHub Actions"
#          git config user.email "actions@github.com"
#          git add .
#          git commit -m "Sync changes from source repo" || echo "No changes to commit"
#          git push origin ${{ github.ref_name }}  # Push to the same branch in the target repo
