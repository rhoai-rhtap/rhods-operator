name: Bundle Sync CI

on:
  workflow_dispatch:

  push:
    branches:
      - 'rhoai-*'  # Trigger the workflow on pushes to any rhoai-* branch
    paths:
      - 'bundle/**'  # Trigger the workflow for changes to any file in the bundle directory
      - 'Dockerfiles/bundle.Dockerfile'  # Trigger the workflow for changes to the Dockerfile

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Generate github-app token
        id: app-token
        uses: getsentry/action-github-app-token@v2
        with:
          app_id: ${{ secrets.RHOAI_DEVOPS_APP_ID }}
          private_key: ${{ secrets.RHOAI_DEVOPS_APP_PRIVATE_KEY }}
      - name: Checkout source repo
        uses: actions/checkout@v3
        with:
          repository: rhoai-rhtap/rhods-operator
          path: source_repo
          ref: ${{ github.ref_name }}  # Use the same branch name as in the event
          token: ${{ steps.app-token.outputs.token }}

      - name: Checkout target repo
        uses: actions/checkout@v3
        with:
          repository: rhoai-rhtap/RHOAI-Build-Config
          path: target_repo
          ref: ${{ github.ref_name }}  # Use the same branch name as in the event
          token: ${{ steps.app-token.outputs.token }}

      - name: Sync Bundle Files
        run: |
          mkdir -p target_repo/to-be-processed/bundle
          echo "Updating bundle related files"
          cp -r source_repo/bundle/* target_repo/to-be-processed/bundle
          echo "Updating Dockerfile"
          cp source_repo/Dockerfiles/bundle.Dockerfile target_repo/to-be-processed/bundle/Dockerfile

      - name: Commit and push the changes to release branch
        uses: actions-js/push@master
        with:
          github_token: ${{ steps.app-token.outputs.token }}
          branch: ${{ github.ref_name }}
          message: "Sync changes from source repo"
          repository: rhoai-rhtap/RHOAI-Build-Config
          directory: target_repo
          author_name: Openshift-AI DevOps
          author_email: openshift-ai-devops@redhat.com

#      - name: Remove unnecessary fields from CSV
#        run: |
#          yq eval 'del(.spec.skipRange)' -i source_repo/bundle/manifests/*.clusterserviceversion.yaml
#          yq eval 'del(.spec.replaces)' -i source_repo/bundle/manifests/*.clusterserviceversion.yaml
#
#      - name: Remove channels and defaultChannel from annotations.yaml
#        run: |
#          yq eval 'del(.annotations."operators.operatorframework.io.bundle.channels.v1")' -i source_repo/bundle/metadata/annotations.yaml
#          yq eval 'del(.annotations."operators.operatorframework.io.bundle.channel.default.v1")' -i source_repo/bundle/metadata/annotations.yaml
#
#      - name: Remove labels from Dockerfile
#        run: |
#          sed -i '/LABEL operators.operatorframework.io.bundle.channels.v1=/d' source_repo/Dockerfiles/bundle.Dockerfile
#          sed -i '/LABEL operators.operatorframework.io.bundle.channel.default.v1=/d' source_repo/Dockerfiles/bundle.Dockerfile
#
#      - name: Retain current image digests in the RBC repo
#        run: |
#          yq eval '.spec.relatedImages[] | select(.name == "rhods-operator")' target_repo/bundle/manifests/*.clusterserviceversion.yaml > /tmp/rbc_csv.yaml
#          for image in $(yq eval '.image' /tmp/rbc_csv.yaml); do
#            yq eval ".spec.relatedImages[] |= (.image = \"$image\")" -i source_repo/bundle/manifests/*.clusterserviceversion.yaml
#          done
#
#      - name: Retain RELATED_IMAGE and relatedImages sections
#        run: |
#          yq eval '.spec.relatedImages' source_repo/bundle/manifests/*.clusterserviceversion.yaml > /tmp/relatedImages_section.yaml
#          yq eval 'del(.spec.relatedImages)' -i source_repo/bundle/manifests/*.clusterserviceversion.yaml
#          yq eval-all 'select(fileIndex == 0) | .spec.relatedImages = load("/tmp/relatedImages_section.yaml")' source_repo/bundle/manifests/*.clusterserviceversion.yaml > /tmp/new_csv.yaml
#          mv /tmp/new_csv.yaml source_repo/bundle/manifests/*.clusterserviceversion.yaml
#
#      - name: Verify RELATED_IMAGE Values
#        run: |
#          yq eval '.spec.relatedImages[] | .name + ": " + .image' source_repo/bundle/manifests/*.clusterserviceversion.yaml
#
#      - name: Compare and Sync Changes
#        run: |
#          sync_files() {
#            local source_dir=$1
#            local target_dir=$2
#            for file in $(find $source_dir -type f); do
#              relative_path=$(realpath --relative-to="$source_dir" "$file")
#              target_file="$target_dir/$relative_path"
#              if [ -f "$target_file" ]; then
#                if ! diff -q "$file" "$target_file" > /dev/null 2>&1; then
#                  echo "Updating $target_file"
#                  cp "$file" "$target_file"
#                else
#                  echo "No changes in $target_file"
#                fi
#              else
#                echo "New file detected, copying $file to target repo"
#                mkdir -p "$(dirname "$target_file")"
#                cp "$file" "$target_file"
#              fi
#            done
#          }
#          sync_files "source_repo/bundle" "target_repo/bundle"

      # Sync Dockerfile

#      - name: Commit and Push Changes to Target Repo
#        run: |
#          cd target_repo
#          git config user.name "GitHub Actions"
#          git config user.email "actions@github.com"
#          git add .
#          git commit -m "Sync changes from source repo" || echo "No changes to commit"
#          git push origin ${{ github.ref_name }}  # Push to the same branch in the target repo
